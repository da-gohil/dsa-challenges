#Basic Concepts-

1. ArrayList
Definition
A dynamic array that allows for random access and resizes automatically.
Key Characteristics
Order: Maintains the order of elements.
Indexing: Supports indexing (i.e., elements can be accessed via their position).
Mutability: Elements can be modified, added, or removed.
Duplicates: Allows duplicate elements.
Performance
Access Time: O(1) for index-based access.
Insertion/Deletion: O(n) in the worst case, due to potential shifting of elements.

2. Tuple
Definition
An immutable, ordered collection of elements. In Python, tuples are used; in Java, a similar concept can be created using classes or other constructs.
Key Characteristics
Order: Maintains the order of elements.
Indexing: Supports indexing.
Mutability: Immutable (cannot be modified once created).
Duplicates: Allows duplicate elements.
Performance
Access Time: O(1) for index-based access.
Insertion/Deletion: Not applicable (immutable).

3. Set
Definition
A collection of unique elements with no specific order.
Key Characteristics
Order: Does not maintain order (in Python, order is preserved as of Python 3.7+ but it's not a characteristic of sets).
Indexing: Does not support indexing.
Mutability: Elements can be added or removed, but the set itself is mutable.
Duplicates: Does not allow duplicate elements.
Performance
Access Time: O(1) for membership tests.
Insertion/Deletion: O(1) on average.

4. Dictionary
Definition
A collection of key-value pairs where each key is unique and maps to a value.
Key Characteristics
Order: Maintains insertion order (as of Python 3.7+).
Indexing: Uses keys (not integer indices) to access values.
Mutability: Keys and values can be modified, added, or removed, but keys must be immutable.
Duplicates: Keys must be unique, but values can be duplicated.
Performance
Access Time: O(1) on average for key-based access.
Insertion/Deletion: O(1) on average for adding or removing key-value pairs.

5. Hash Collision - A hash collision occurs when two different inputs produce the same hash value. In the context of hash functions, this means that despite having different data or objects, their hash codes are identical.
6. The maximum number that we can store in  an n-bit computer is 2^n -1 
7. What are don't care values in a set?
8. Why constructor doesn't have a return type / why can't we make a constructor return anything?
9. Pass by value and Pass by reference
10. Why do we need Dynamic memory allocation?
11. Stack: A stack is a data structure that follows the Last In, First Out (LIFO) principle, meaning the last element added is the first to be removed. It supports two primary operations: push (to add an element) and pop (to remove the most recently added element).
Operations of Stack - 
  1) PUSH
  2) POP
  3) TOP
  3) isFUll
  4) isEmpty

Queue: A queue is a data structure that follows the First In, First Out (FIFO) principle, meaning the first element added is the first to be removed. It supports several primary operations to manage elements within it.

Operations of Queue:

Enqueue: Add an element to the end of the queue.
Dequeue: Remove the element from the front of the queue.
Front: Get the element at the front of the queue without removing it.
isFull: Check if the queue is full (applicable in bounded queues).
isEmpty: Check if the queue is empty.

Circular Queue: A circular queue is a data structure that follows the First In, First Out (FIFO) principle, but unlike a regular queue, the last position is connected back to the first position to make a circle. This allows for efficient use of space by reusing the empty positions created by dequeuing elements.

Operations of Circular Queue:

Enqueue: Add an element to the end of the queue.
Dequeue: Remove the element from the front of the queue.
Front: Get the element at the front of the queue without removing it.
Rear: Get the element at the rear of the queue without removing it.
isFull: Check if the queue is full.
isEmpty: Check if the queue is empty

Singly Linked List: A singly linked list is a data structure consisting of nodes where each node contains a data element and a reference (or link) to the next node in the sequence. It allows for efficient insertion and deletion operations but only supports forward traversal.

Operations of Singly Linked List:

Insertion: Add a node to the linked list at a specified position (beginning, end, or middle).
Deletion: Remove a node from the linked list from a specified position.
Traversal: Traverse the entire linked list from the head node to the last node.
Search: Find a node with a specific value in the linked list.
Update: Modify the data of a specific node in the linked list.

Harmonic Series
The harmonic series is the sum of the reciprocals of the positive integers. Despite the terms getting smaller as 
ùëò
k increases, the series does not converge to a finite limit; it diverges. This means that as more terms are added, the sum grows without bound.

The harmonic series is significant in various fields of mathematics and science, including number theory, analysis, and physics

Arithmetic Series
An arithmetic series is the sum of the terms of an arithmetic sequence, where each term after the first is obtained by adding a constant difference to the preceding term. 

Recursion
Recursion is a programming technique where a function calls itself to solve smaller instances of the same problem. It is used to break down complex problems into simpler, more manageable sub-problems. A recursive function typically consists of two main components:

Base Case: The condition under which the recursion stops. It prevents the function from calling itself indefinitely and usually provides a direct solution for the simplest instance of the problem.

Recursive Case: The part of the function where it calls itself with a modified argument, moving towards the base case.

When to Use Recursion
Recursion is useful when:

The problem can be naturally divided into similar sub-problems.
The problem's solution involves breaking it down into simpler instances of itself.
You prefer a solution that is easier to implement or more readable compared to iterative solutions.

Considerations
Stack Overflow: Recursion can lead to stack overflow errors if the recursion depth is too deep. This happens because each recursive call consumes stack space.
Performance: Recursive solutions can be less efficient due to overhead from multiple function calls. In some cases, iterative solutions might be more efficient.
Tail Recursion: Some programming languages optimize tail-recursive functions to avoid increasing stack depth.

Homogeneous Containers
Definition: A homogeneous container is a collection that stores elements of the same type. This ensures type safety and consistency within the container.

Examples in Java:

ArrayList: A dynamic array that stores elements of a specified type.
HashSet: A collection that does not allow duplicate elements and stores elements of a specified type.
LinkedList: A doubly-linked list that stores elements of a specified type.
Heterogeneous Containers
Definition: A heterogeneous container is a collection that can store elements of different types. This allows more flexibility but may sacrifice type safety and requires careful handling of type conversions.

Examples in Java:

Object Array: An array that can store elements of different types, since Object is the base class for all Java objects.
HashMap: A map that stores key-value pairs where keys and values differ.
Hash: A fixed-size value generated from input data.
Hashing: The process of generating a hash value using a hash function.
Hash Function: An algorithm that converts input data into a hash value.
Hash Table: A data structure that uses hashing to manage and retrieve data efficiently.
Collisions: Occur when different inputs produce the same hash value.

Graph Data Structure
A graph is a versatile data structure used to represent relationships or connections between pairs of entities. It is widely used in various applications such as social networks, computer networks, route mapping, and many others.

Components of a Graph
Vertices (or Nodes):

The fundamental units of a graph.
Represent entities or objects.
Example: In a social network, users can be represented as vertices.
Edges (or Arcs):

The connections or relationships between vertices.
Represent the relationship or link between entities.
Example: In a social network, friendships or followings between users can be represented as edges.
Types of Graphs
Undirected Graph:

Edges have no direction.
The connection between vertices is bidirectional.
Example: A social network where friendships are mutual.
Directed Graph (Digraph):

Edges have a direction.
The connection between vertices is unidirectional.
Example: A Twitter follow relationship where one user follows another, but not necessarily vice versa.
Weighted Graph:

Edges have weights (or costs) associated with them.
The weight represents the cost, distance, or any other quantitative measure.
Example: A road network where edges represent distances between cities.
Unweighted Graph:

Edges have no weights.
The connection between vertices is simply represented as present or absent.
Cyclic Graph:

Contains at least one cycle (a path that starts and ends at the same vertex).
Acyclic Graph:

Does not contain any cycles.
Connected Graph:

There is a path between every pair of vertices.
In undirected graphs, every vertex is reachable from every other vertex.
Disconnected Graph:

Some vertices are not reachable from others.
The graph consists of multiple disconnected subgraphs.
Complete Graph:

Every pair of distinct vertices is connected by a unique edge.
Example: A fully connected network.
Graph Representations
Adjacency Matrix:

A 2D array where the cell at row i and column j indicates whether there is an edge between vertex i and vertex j.
Pros: Simple and easy to implement.
Cons: Inefficient in terms of space for sparse graphs.

Adjacency List:

An array of lists where each list represents the vertices connected to a particular vertex.
Pros: More space-efficient for sparse graphs.
Cons: Slightly more complex to implement and access

Graphs have directions to indicate and assume the right way or the existing path.
The software is useless if nobody is connected.

# We do not want the algorithm to be fast, we want it to be linear
# High-level Concepts --> Data ZStructures + Algorithms --> Object-Oriented Programming --> Testing


#Algorithms
1) Two pointer Algorithm
2) Reverse a number - Two-finger algorithm
3) Generate a number as per their position - COunting Sort ALgorithm
4) Dynamic arrays and HAsh table implementation - Table Doubling Algorithm(* know about the amortized condition)
5) Graph Traversal Algorithms -
  a)Depth-First Search (DFS): We will go to extreme depth unless and until we have no other point to reach. Explores as far as possible along a branch before backtracking.
Uses a stack (either explicitly or via recursion). We come back at the same node and do the same recursive call again and again. 
  b)Breadth-First Search (BFS): Explores all neighbors at the present depth level before moving on to nodes at the next depth level.
Uses a queue.

Our goal for BFS and DFS is to visit each node exactly once not more than that. 
6) Greedy Algorithm: Greedy algorithms often leverage this property, as each local decision should lead to an optimal global solution.
The algorithm terminates when no more choices can be made, or the solution is complete.
Kruskal‚Äôs Algorithm: A greedy algorithm to find the Minimum Spanning Tree by always selecting the smallest weight edge that doesn't form a cycle.
Huffman Coding: A data compression algorithm that uses a greedy approach to build a prefix-free binary code based on the frequencies of characters.

7) Bucket Sort - Leetcode 347
